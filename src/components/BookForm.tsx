import React, { useState, useRef, useEffect } from 'react';
import { X, Upload, Printer, Trash2 } from 'lucide-react';
import type { Book, Shelf } from '../types';

interface BookFormProps {
  shelves: Shelf[];
  onAddBook: (book: Book) => void;
  onEditBook: (book: Book) => void;
  onDeleteBook: (bookId: string) => void;
  onClose: () => void;
  editingBook: Book | null;
}

const defaultCovers = [
  '/covers/default-cover-1.png',
  '/covers/default-cover-2.png',
  '/covers/default-cover-3.png',
  '/covers/default-cover-4.png',
];

export default function BookForm({ shelves, onAddBook, onEditBook, onDeleteBook, onClose, editingBook }: BookFormProps) {
  const [book, setBook] = useState<Partial<Book>>(editingBook || {});
  const [isDragging, setIsDragging] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const dropZoneRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (editingBook) {
      setBook(editingBook);
    } else {
      setBook({});
    }
  }, [editingBook]);

  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      const printContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${book.title || 'Book Details'}</title>
          <style>
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
            body {
              font-family: 'Inter', sans-serif;
              margin: 0;
              padding: 40px;
              background-color: #121212;
              color: #E0E0E0;
              line-height: 1.6;
            }
            .container {
              max-width: 800px;
              margin: 0 auto;
            }
            .print-layout {
              display: flex;
              gap: 40px;
              align-items: flex-start;
            }
            .book-info {
              flex: 0 0 200px;
            }
            .book-cover {
              width: 100%;
              height: auto;
              border-radius: 8px;
              box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }
            .book-details {
              margin-top: 20px;
            }
            .book-review {
              flex: 1;
              background-color: #1E1E1E;
              border-radius: 8px;
              padding: 20px;
              font-family: 'Courier Prime', monospace;
              white-space: pre-wrap;
              color: #B0B0B0;
              font-size: 14px;
              line-height: 1.6;
            }
            h1 {
              margin: 20px 0 10px;
              color: #FFFFFF;
              font-size: 24px;
              font-weight: 700;
            }
            .author {
              color: #B0B0B0;
              font-size: 16px;
              margin-bottom: 10px;
            }
            .metadata {
              font-size: 14px;
              color: #808080;
              margin-top: 10px;
            }
            .footer {
              margin-top: 40px;
              text-align: center;
              color: #808080;
              font-size: 12px;
              border-top: 1px solid #2A2A2A;
              padding-top: 20px;
            }
            @media print {
              body {
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="print-layout">
              <div class="book-info">
                <img src="${book.cover || defaultCovers[0]}" alt="Book cover" class="book-cover" />
                <div class="book-details">
                  <h1>${book.title || 'Untitled'}</h1>
                  <p class="author">by ${book.author || 'Unknown Author'}</p>
                  <p class="metadata">Shelf: ${book.shelf || 'Unassigned'}</p>
                </div>
              </div>
              <div class="book-review">
                ${book.review || 'No review available.'}
              </div>
            </div>
            <div class="footer">
              Generated by BookMarkd | ${new Date().toLocaleDateString()}
            </div>
          </div>
          <script>
            window.onload = () => {
              setTimeout(() => {
                window.print();
                window.close();
              }, 500);
            };
          </script>
        </body>
        </html>
      `;
      printWindow.document.write(printContent);
      printWindow.document.close();
    }
  };
  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.currentTarget === dropZoneRef.current) {
      setIsDragging(false);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragging(false);

    const files = Array.from(e.dataTransfer.files);
    const imageFile = files.find(file => file.type.startsWith('image/'));
    if (imageFile) {
      setBook(prev => ({ ...prev, cover: URL.createObjectURL(imageFile) }));
    }
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (book.title && book.author && book.shelf) {
      const newBook: Book = {
        id: book.id || Date.now().toString(),
        title: book.title,
        author: book.author,
        cover: book.cover || defaultCovers[0],
        shelf: book.shelf,
        review: book.review || ''
      };
      if (editingBook) {
        onEditBook(newBook);
      } else {
        onAddBook(newBook);
      }
      setBook({});
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      onClose();
    }
  };

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setBook(prev => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type.startsWith('image/')) {
      setBook(prev => ({ ...prev, cover: URL.createObjectURL(file) }));
    }
  };

  const handleDefaultCoverSelect = (coverUrl: string) => {
    setBook(prev => ({ ...prev, cover: coverUrl }));
  };

  const handleDelete = () => {
    if (editingBook && editingBook.id) {
      onDeleteBook(editingBook.id);
      onClose();
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 font-sans z-50">
      <div className="bg-[#1A1825] rounded-lg p-8 w-full max-w-2xl shadow-xl border border-white/10">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-orange-400 bg-clip-text text-transparent">
            {editingBook ? 'Edit Book' : 'Add New Book'}
          </h2>
          <div className="flex items-center gap-4">
            <button
              type="button"
              onClick={handlePrint}
              className="text-white/60 hover:text-orange-400 focus:outline-none transition-colors duration-200"
              title="Print book details"
            >
              <Printer className="h-6 w-6" />
            </button>
            <button
              type="button"
              onClick={onClose}
              className="text-white/60 hover:text-white focus:outline-none transition-colors duration-200"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="flex gap-6">
            <div className="flex-1 space-y-4">
              <div>
                <label htmlFor="title" className="block text-sm font-medium text-white/80 mb-1">
                  Book Title
                </label>
                <input
                  id="title"
                  name="title"
                  type="text"
                  value={book.title || ''}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 bg-white/5 text-white rounded-md border border-white/10 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-all duration-200"
                  required
                />
              </div>
              <div>
                <label htmlFor="author" className="block text-sm font-medium text-white/80 mb-1">
                  Author
                </label>
                <input
                  id="author"
                  name="author"
                  type="text"
                  value={book.author || ''}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 bg-white/5 text-white rounded-md border border-white/10 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-all duration-200"
                  required
                />
              </div>
              <div>
                <label htmlFor="shelf" className="block text-sm font-medium text-white/80 mb-1">
                  Shelf
                </label>
                <select
                  id="shelf"
                  name="shelf"
                  value={book.shelf || ''}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 bg-white/5 text-white rounded-md border border-white/10 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-all duration-200"
                  required
                >
                  <option value="">Select a shelf</option>
                  {shelves.map((shelf) => (
                    <option key={shelf.id} value={shelf.id}>
                      {shelf.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div className="flex-1">
              <label className="block text-sm font-medium text-white/80 mb-1">
                Cover Image
              </label>
              <div
                ref={dropZoneRef}
                onDragEnter={handleDragEnter}
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                className={`mt-1 flex flex-col justify-center items-center px-6 pt-5 pb-6 border-2 ${
                  isDragging ? 'border-orange-400 bg-orange-400/10' : 'border-white/10'
                } ${
                  book.cover ? 'border-solid bg-white/5' : 'border-dashed'
                } rounded-md transition-all duration-200`}
              >
                {book.cover ? (
                  <div className="text-center">
                    <div className="flex items-center justify-center mb-2">
                      <img src={book.cover} alt="Book cover" className="h-32 w-24 object-cover rounded" />
                    </div>
                    <button
                      type="button"
                      onClick={() => setBook(prev => ({ ...prev, cover: undefined }))}
                      className="mt-2 text-sm text-orange-400 hover:text-orange-300"
                    >
                      Remove cover
                    </button>
                  </div>
                ) : (
                  <div className="space-y-1 text-center">
                    <Upload className="mx-auto h-12 w-12 text-white/60" />
                    <div className="flex text-sm text-white/60">
                      <label
                        htmlFor="cover"
                        className="relative cursor-pointer bg-white/5 rounded-md font-medium text-orange-400 hover:text-orange-300 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-orange-400"
                      >
                        <span>Upload a cover</span>
                        <input
                          id="cover"
                          name="cover"
                          type="file"
                          accept="image/*"
                          onChange={handleFileChange}
                          ref={fileInputRef}
                          className="sr-only"
                        />
                      </label>
                      <p className="pl-1">or drag and drop</p>
                    </div>
                    <p className="text-xs text-white/60">
                      PNG, JPG, GIF up to 10MB
                    </p>
                  </div>
                )}
              </div>
              <div className="mt-4">
                <p className="text-sm font-medium text-white/80 mb-2">OR choose a default cover:</p>
                <div className="grid grid-cols-4 gap-2">
                  {defaultCovers.map((cover, index) => (
                    <button
                      key={index}
                      type="button"
                      onClick={() => handleDefaultCoverSelect(cover)}
                      className={`p-1 border rounded-md ${book.cover === cover ? 'border-orange-400' : 'border-white/10'}`}
                    >
                      <img src={cover} alt={`Default cover ${index + 1}`} className="w-full h-auto object-cover rounded" />
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
          <div>
            <label htmlFor="review" className="block text-sm font-medium text-white/80 mb-1">
              Review
            </label>
            <textarea
              id="review"
              name="review"
              value={book.review || ''}
              onChange={handleInputChange}
              className="w-full px-4 py-2 bg-white/5 text-white rounded-md border border-white/10 focus:outline-none focus:ring-2 focus:ring-orange-400 transition-all duration-200 min-h-[100px] resize-y"
              placeholder="Write your review here..."
            />
          </div>
          <div className="flex justify-between items-center">
            {editingBook && (
              <button
                type="button"
                onClick={() => setShowDeleteConfirm(true)}
                className="px-4 py-2 text-sm font-medium text-red-500 bg-red-500/10 rounded-md hover:bg-red-500/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                <Trash2 className="h-4 w-4 inline-block mr-2" />
                Delete Book
              </button>
            )}
            <div className="flex space-x-3 ml-auto">
              <button
                type="button"
                onClick={onClose}
                className="px-6 py-2 text-sm font-medium text-white bg-white/10 rounded-md hover:bg-white/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-400"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-6 py-2 text-sm font-medium text-white bg-gradient-to-r from-purple-500 to-orange-500 rounded-md hover:from-purple-600 hover:to-orange-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-400"
              >
                {editingBook ? 'Save Changes' : 'Add Book'}
              </button>
            </div>
          </div>
        </form>

        {showDeleteConfirm && (
          <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
            <div className="bg-[#1A1825] rounded-lg p-6 max-w-sm w-full border border-white/10">
              <h3 className="text-xl font-bold text-white mb-4">Confirm Deletion</h3>
              <p className="text-white/80 mb-6">Are you sure you want to delete this book? This action cannot be undone.</p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-4 py-2 text-sm font-medium text-white bg-white/10 rounded-md hover:bg-white/20 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-orange-400"
                >
                  Cancel
                </button>
                <button
                  onClick={handleDelete}
                  className="px-4 py-2 text-sm font-medium text-white bg-red-500 rounded-md hover:bg-red-600 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}